name: "Terraform (transversal / atlas)"

permissions:
  id-token: write
  contents: read
  actions: write

on:
  push:
    branches: [main]
    paths:
      - "terraform-transversal/**"
      - "terraform-atlas/**"
      - ".github/workflows/terraform-stacks.yml"
  workflow_dispatch:
    inputs:
      stack:
        description: "Qué stack quieres ejecutar"
        type: choice
        required: true
        options: [transversal, atlas]
        default: transversal
      action:
        description: "Acción Terraform"
        type: choice
        required: true
        options: [apply, destroy]
        default: apply

jobs:
  pick-stack:
    runs-on: ubuntu-latest
    outputs:
      stack: ${{ steps.detect.outputs.stack }}
      action: ${{ steps.detect.outputs.action }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect stack/action (push vs dispatch)
        id: detect
        shell: bash
        run: |
          # defaults
          STACK="${{ github.event.inputs.stack }}"
          ACTION="${{ github.event.inputs.action }}"

          if [ -z "$STACK" ]; then
            # push basado en paths
            if git diff --name-only HEAD~1 HEAD | grep -q "^terraform-atlas/"; then
              STACK="atlas"
            else
              STACK="transversal"
            fi
          fi

          if [ -z "$ACTION" ]; then
            ACTION="apply"
          fi

          echo "stack=$STACK"   >> $GITHUB_OUTPUT
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "Stack=$STACK / Action=$ACTION"

  terraform:
    needs: pick-stack
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3

      - name: Set working dir
        id: wdir
        run: |
          if [ "${{ needs.pick-stack.outputs.stack }}" = "atlas" ]; then
            echo "dir=terraform-atlas" >> $GITHUB_OUTPUT
          else
            echo "dir=terraform-transversal" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        working-directory: ${{ steps.wdir.outputs.dir }}
        run: terraform init -reconfigure

      - name: Terraform Validate
        working-directory: ${{ steps.wdir.outputs.dir }}
        run: terraform validate -no-color

      - name: Terraform Plan
        if: ${{ needs.pick-stack.outputs.action == 'apply' }}
        working-directory: ${{ steps.wdir.outputs.dir }}
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI }}
          TF_VAR_atlas_public_key: ${{ secrets.ATLAS_PUBLIC_KEY }}
          TF_VAR_atlas_private_key: ${{ secrets.ATLAS_PRIVATE_KEY }}
          TF_VAR_atlas_org_id: ${{ secrets.ATLAS_ORG_ID }}
          TF_VAR_db_password: ${{ secrets.ATLAS_DB_PASSWORD }}
        run: terraform plan -no-color

      - name: Terraform Apply
        if: ${{ needs.pick-stack.outputs.action == 'apply' }}
        working-directory: ${{ steps.wdir.outputs.dir }}
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI }}
          TF_VAR_atlas_public_key: ${{ secrets.ATLAS_PUBLIC_KEY }}
          TF_VAR_atlas_private_key: ${{ secrets.ATLAS_PRIVATE_KEY }}
          TF_VAR_atlas_org_id: ${{ secrets.ATLAS_ORG_ID }}
          TF_VAR_db_password: ${{ secrets.ATLAS_DB_PASSWORD }}
        run: terraform apply -auto-approve

      - name: Terraform Destroy
        if: ${{ needs.pick-stack.outputs.action == 'destroy' }}
        working-directory: ${{ steps.wdir.outputs.dir }}
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI }}
          TF_VAR_atlas_public_key: ${{ secrets.ATLAS_PUBLIC_KEY }}
          TF_VAR_atlas_private_key: ${{ secrets.ATLAS_PRIVATE_KEY }}
          TF_VAR_atlas_org_id: ${{ secrets.ATLAS_ORG_ID }}
          TF_VAR_db_password: ${{ secrets.ATLAS_DB_PASSWORD }}
        run: terraform destroy -auto-approve
